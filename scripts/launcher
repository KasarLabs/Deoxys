#!/bin/bash

declare -x FRAME
declare -x FRAME_INTERVAL

set_spinner() {
  FRAME=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  FRAME_INTERVAL=0.1
}

start() {
  local step=0

  tput civis -- invisible

  while [ "$step" -lt "${#CMDS[@]}" ]; do
    ${CMDS[$step]} & pid=$!

    while ps -p $pid &>/dev/null; do
      echo -ne "\\r[   ] ${STEPS[$step]} ..."

      for k in "${!FRAME[@]}"; do
        echo -ne "\\r[ ${FRAME[k]} ] ${STEPS[$step]} ..."
        sleep $FRAME_INTERVAL
      done
    done

    echo -ne "\\r[ ✔ ] ${STEPS[$step]}\\n"
    step=$((step + 1))
  done

  tput cnorm -- normal
}

# Detect OS
OS="$(uname -s)"
case "$OS" in
  Linux*)     OS=Linux;;
  Darwin*)    OS=Mac;;
  *)          echo "Unsupported OS: $OS"; exit 1;;
esac

# Colors and styles
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
CYAN=$(tput setaf 6)
NC=$(tput sgr0) # No Color
BOLD=$(tput bold)
UNDERLINE=$(tput smul)
BLINK=$(tput blink)

# ASCII Icons for social links
GITHUB_ICON="🔗 GitHub: "
DOCS_ICON="📄 Documentation: "

# Function for progress bar
progress_bar() {
    local duration=${1}
    already_done() { for ((done=0; done<$elapsed; done++)); do printf "▇"; done }
    remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
    percentage() { printf "| %s%%" $(( ($elapsed * 100) / $duration )); }

    for ((elapsed=1; elapsed<=$duration; elapsed++))
    do
        printf "\r["
        already_done; remaining; percentage
        sleep 0.1
    done
    printf "]\n"
}

# ASCII Art
ascii_art() {
echo -e "${RED}
                    __  ___          __                
                   /  |/  /___ _____/ /___ __________ _
                  / /|_/ / __ \`/ __  / __ \`/ ___/ __ \`/
                 / /  / / /_/ / /_/ / /_/ / /  / /_/ / 
                /_/  /_/\__,_/\__,_/\__,_/_/   \__,_/  
                                       ${NC}v0.7.0-alpha
"
}

# Welcome message
clear
ascii_art
echo -e "${GREEN}${BOLD}Welcome to the Madara Docker Launcher!${NC}"
echo -e "${GREEN}This script allows you to easily launch a Madara instance using Docker with your desired parameters.${NC}"
echo -e "${GREEN}For more information, please refer to our documentation:${NC}"
echo -e "${CYAN}${DOCS_ICON}${UNDERLINE}https://madara.io${NC}"
# Save cursor position
tput sc

# Check for dependencies
echo -e "\n${GREEN}We will now proceed to a dependency check${NC}"

echo -e "\n${YELLOW}${BOLD}Would you like to proceed? (yes/no)${NC}"
read -p "> " PROCEED

tput rc
tput ed

if [ "$PROCEED" != "yes" ]; then
    echo -e "${RED}Operation aborted.${NC}"
    exit 1
fi

# Define dependencies and their check commands
DEPENDENCIES=(
    "curl:command -v curl"
    "docker:command -v docker"
    "git:command -v git"
)

# Function to check for a dependency
check_dependency() {
    eval "$1" >/dev/null 2>&1
}

# Check dependencies
MISSING_DEPS=()
for DEP in "${DEPENDENCIES[@]}"; do
    DEP_NAME="${DEP%%:*}"
    DEP_CHECK="${DEP##*:}"
    if ! check_dependency "$DEP_CHECK"; then
        MISSING_DEPS+=("$DEP_NAME")
    fi
done

# Report missing dependencies
if [ ${#MISSING_DEPS[@]} -ne 0 ]; then
    echo -e "${YELLOW}The following dependencies are missing:${NC}"
    for DEP in "${MISSING_DEPS[@]}"; do
        echo -e "${YELLOW}- $DEP${NC}"
    done

    echo -e "\n${YELLOW}${BOLD}Do you want to install the missing dependencies? (yes/no)${NC}"
    read -p "> " INSTALL_DEPS

    if [ "$INSTALL_DEPS" != "yes" ]; then
        echo -e "\n${RED}Installation aborted.${NC}"
        exit 1
    else
        echo -e "\n${GREEN}Installing missing dependencies...${NC}"
        if [ "$OS" == "Linux" ]; then
            sudo apt update
            for DEP in "${MISSING_DEPS[@]}"; do
                if [ "$DEP" == "docker" ]; then
                    echo -e "${GREEN}Installing Docker...${NC}"
                    curl -fsSL https://get.docker.com -o get-docker.sh
                    sudo sh get-docker.sh
                    rm get-docker.sh
                    sudo usermod -aG docker $USER
                    newgrp docker
                else
                    if ! sudo apt install -y "$DEP"; then
                        echo -e "${RED}Failed to install $DEP.${NC}"
                    fi
                fi
            done
        elif [ "$OS" == "Mac" ]; then
            for DEP in "${MISSING_DEPS[@]}"; do
                if [ "$DEP" == "docker" ]; then
                    echo -e "${GREEN}Please install Docker Desktop from https://www.docker.com/products/docker-desktop and run this script again.${NC}"
                    exit 1
                else
                    if ! brew install "$DEP"; then
                        echo -e "${RED}Failed to install $DEP.${NC}"
                    fi
                fi
            done
        fi

        # Re-check dependencies to ensure all are installed
        echo -e "\n${GREEN}Verifying installation of dependencies...${NC}"
        RECHECK_MISSING_DEPS=()
        for DEP in "${DEPENDENCIES[@]}"; do
            DEP_NAME="${DEP%%:*}"
            DEP_CHECK="${DEP##*:}"
            if ! check_dependency "$DEP_CHECK"; then
                RECHECK_MISSING_DEPS+=("$DEP_NAME")
            fi
        done

        if [ ${#RECHECK_MISSING_DEPS[@]} -ne 0 ]; then
            echo -e "\n${RED}The following dependencies could not be installed:${NC}"
            for DEP in "${RECHECK_MISSING_DEPS[@]}"; do
                echo -e "${RED}- $DEP${NC}"
            done
            exit 1
        else
            echo -e "\n${GREEN}All dependencies are successfully installed and verified.${NC}"
        fi
    fi
else
    echo -e "\n${GREEN}All dependencies are installed.${NC}"
fi

echo -e "\n${GREEN}We will now proceed with the download of Madara from GitHub:${NC}"
echo -e "${CYAN}${GITHUB_ICON}${UNDERLINE}https://github.com/madara-alliance/madara${NC}"

# Ask for installation directory
echo -e "\n${YELLOW}${BOLD}Where would you like to install Madara? (default is current directory)${NC}"
read -p "> " INSTALL_DIR

# Set default directory if not provided
INSTALL_DIR=${INSTALL_DIR:-$(pwd)}

# Clone the Madara repository
echo -e "\n${GREEN}Cloning the Madara repository into ${INSTALL_DIR}...${NC}"
if [ -d "${INSTALL_DIR}/madara" ]; then
    echo -e "${YELLOW}Madara directory already exists. Updating...${NC}"
    cd "${INSTALL_DIR}/madara" && git pull
else
    git clone https://github.com/madara-alliance/madara.git "${INSTALL_DIR}/madara"
    cd "${INSTALL_DIR}/madara"
fi


tput rc
tput ed

# Build the Docker image
echo -e "\n${GREEN}Building the Docker image... (this operation will take a few minutes)${NC}"
# if ! docker build -t madara .; then
#     echo -e "${RED}Docker image build failed. Please check the Dockerfile and try again.${NC}"
#     exit 1
# fi

tput rc
tput ed

# Choose the mode
echo -e "\n🕹️ ${YELLOW}${BOLD}On which mode would you like to run Madara? (Enter a number)${NC}\n"
echo "${YELLOW}1. Full Node${NC}"
echo "${YELLOW}2. Sequencer${NC}"
echo "${YELLOW}3. Devnet${NC}"
while true; do
    read -p "> " MODE_CHOICE
    case $MODE_CHOICE in
        1) MODE="full"; break ;;
        2) MODE="sequencer"; break ;;
        3) MODE="devnet"; break ;;
        *) echo -e "${YELLOW}Invalid choice, please enter 1, 2, or 3.${NC}" ;;
    esac
done

tput rc
tput ed

# Ask for the node name
while true; do
    echo -e "\n${YELLOW}${BOLD}👤 What name would you like to give this node?${NC}"
    read -p "> " NODE_NAME
    if [ -n "$NODE_NAME" ]; then
        break
    else
        echo -e "${RED}Node name cannot be empty.${NC}"
    fi
done

tput rc
tput ed

# Choose the network based on the mode
if [ "$MODE" == "sequencer" ] || [ "$MODE" == "devnet" ]; then
    # For sequencer and devnet modes
    echo -e "\n🌐 ${YELLOW}${BOLD}Please choose one of the available presets or provide a custom chain config path: (Enter a number)${NC}\n"
    echo "${YELLOW}1. Starknet Mainnet${NC}"
    echo "${YELLOW}2. Starknet Testnet${NC}"
    echo "${YELLOW}3. Test${NC}"
    echo "${YELLOW}4. Custom Chain config${NC}"
    while true; do
        read -p "> " NETWORK_CHOICE
        case $NETWORK_CHOICE in
            1) PRESET="starknet_mainnet"; break ;;
            2) PRESET="starknet_testnet"; break ;;
            3) PRESET="test"; break ;;
            4)
                echo -e "\n${YELLOW}Please provide the path to your custom chain config:${NC}"
                read -p "> " CUSTOM_CHAIN_CONFIG
                if [ -f "$CUSTOM_CHAIN_CONFIG" ]; then
                    PRESET="$CUSTOM_CHAIN_CONFIG"
                    break
                else
                    echo -e "${RED}File not found. Please provide a valid path.${NC}"
                fi
                ;;
            *) echo -e "${YELLOW}Invalid choice, please enter 1, 2, 3, or 4.${NC}" ;;
        esac
    done
else
    # For full node mode
    echo -e "\n🌐 ${YELLOW}${BOLD}Please choose a Network or provide a custom Chain config path: (Enter a number)${NC}\n"
    echo "${YELLOW}1. Starknet Mainnet${NC}"
    echo "${YELLOW}2. Starknet Testnet${NC}"
    echo "${YELLOW}3. Starknet Integration${NC}"
    echo "${YELLOW}4. Custom Chain config${NC}"
    while true; do
        read -p "> " NETWORK_CHOICE
        case $NETWORK_CHOICE in
            1) NETWORK="main"; break ;;
            2) NETWORK="test"; break ;;
            3) NETWORK="integration"; break ;;
            4)
                echo -e "\n${YELLOW}Please provide the path to your custom chain config or preset:${NC}"
                read -p "> " CUSTOM_CHAIN_CONFIG
                if [ -f "$CUSTOM_CHAIN_CONFIG" ]; then
                    NETWORK="$CUSTOM_CHAIN_CONFIG"
                    break
                else
                    echo -e "${RED}File not found. Please provide a valid path.${NC}"
                fi
                ;;
            *) echo -e "${YELLOW}Invalid choice, please enter 1, 2, 3, or 4.${NC}" ;;
        esac
    done
fi

tput rc
tput ed

# Set the chain config or network option
if [ "$MODE" == "sequencer" ] || [ "$MODE" == "devnet" ]; then
    # Use --chain-config with PRESET
    CHAIN_CONFIG_OPT="--chain-config=\"${PRESET}\""
else
    # For full node mode
    if [ "$NETWORK_CHOICE" -eq 4 ]; then
        # Custom chain config
        CHAIN_CONFIG_OPT="--chain-config=\"${NETWORK}\""
    else
        # Use --network
        CHAIN_CONFIG_OPT="--network=\"${NETWORK}\""
    fi
fi

# Ask for the database path
echo -e "\n💾 ${YELLOW}${BOLD}Where would you like to store your database? (default: /tmp/madara)${NC}"
read -p "> " BASE_PATH
BASE_PATH=${BASE_PATH:-/tmp/madara}

tput rc
tput ed

# Create the base path directory if it doesn't exist
if [ ! -d "$BASE_PATH" ]; then
    mkdir -p "$BASE_PATH"
fi

# Ask for RPC access
while true; do
    echo -e "\n🔌 ${YELLOW}${BOLD}Do you want to enable RPC access? (yes/no) ${NC}"
    read -p "> " RPC_ACCESS
    case $RPC_ACCESS in
        yes|no) break ;;
        *) echo -e "${YELLOW}Please answer yes or no.${NC}" ;;
    esac
done

tput rc
tput ed

if [ "$RPC_ACCESS" == "yes" ]; then
    RPC_OPTS="--rpc-cors '*' --rpc-external"
    echo -e "\n🚪 ${YELLOW}${BOLD}On which port do you want RPC access? (default: 9944)${NC}"
    read -p "> " RPC_PORT
    RPC_PORT=${RPC_PORT:-9944}
    RPC_OPTS="$RPC_OPTS --rpc-port $RPC_PORT"
    PORT_MAPPING="-p $RPC_PORT:$RPC_PORT"
else
    RPC_OPTS=""
    PORT_MAPPING=""
fi

tput rc
tput ed

# Ask for the L1 endpoint URL
while true; do
    echo -e "\n🔗 ${YELLOW}${BOLD}Provide an L1 RPC endpoint (URL format):${NC}"
    read -p "> " L1_ENDPOINT
    if [[ $L1_ENDPOINT =~ ^https?:// ]]; then
        break
    else
        echo -e "${RED}Please enter a valid URL starting with http:// or https://.${NC}"
    fi
done

tput rc
tput ed

# # Synchronize via snapshot or genesis
# echo -e "\n🔄 ${YELLOW}${BOLD}Which sync mode would you like? (Enter a number)${NC}\n"
# echo "${YELLOW}1. Snap sync (fast)${NC}"
# echo "${YELLOW}2. Full sync (safe)${NC}"
# while true; do
#     read -p "> " SYNC_CHOICE
#     case $SYNC_CHOICE in
#         1) SYNC_OPT="--snap"; break ;;
#         2) SYNC_OPT=""; break ;;
#         *) echo -e "${YELLOW}Invalid choice, please enter 1 or 2.${NC}" ;;
#     esac
# done

# tput rc
# tput ed

# Build the final Docker run command
DOCKER_COMMAND="docker run -d --name madara-node \
    -v ${BASE_PATH}:/data \
    ${PORT_MAPPING} \
    madara \
    run --name \"${NODE_NAME}\" ${CHAIN_CONFIG_OPT} --base-path=\"/data\" ${RPC_OPTS} --l1-endpoint \"${L1_ENDPOINT}\" ${SYNC_OPT}"

echo -e "\n🔄 ${YELLOW}${BOLD}The following Docker command will be executed:${NC}\n"
echo -e "${CYAN}$DOCKER_COMMAND${NC}"

# Confirm before executing
echo -e "\n${YELLOW}${BOLD}Do you want to proceed? (yes/no)${NC}\n"
read -p "> " CONFIRM
if [ "$CONFIRM" == "yes" ]; then
    echo -e "\n${GREEN}Starting the Madara node via Docker...${NC}"
    # Stop and remove any existing container with the same name
    if docker ps -a --format '{{.Names}}' | grep -Eq "^madara-node\$"; then
        echo -e "\n${YELLOW}A container named 'madara-node' already exists. Stopping and removing it...${NC}"
        docker stop madara-node
        docker rm madara-node
    fi
    eval $DOCKER_COMMAND
    echo -e "\n${GREEN}Madara node is now running in Docker container 'madara-node'.${NC}"
else
    echo -e "${RED}Command execution aborted.${NC}"
fi
